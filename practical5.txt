import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from  sklearn.model_selection import train_test_split
from math import exp
data=pd.read_csv("Social_Network_ads.csv")
data.head()


data.describe()


# Visualizing the dataset
plt.scatter(data['Age'], data['Purchased'])
plt.xlabel("age")
plt.ylabel("purchased")
plt.show()
# Divide the data to training set and test set
X_train, X_test, y_train, y_test = train_test_split(data['Age'], data['Purchased'],
test_size=0.20)



from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model.fit(X_train.values.reshape(-1, 1), y_train.values.reshape(-1, 1).ravel())
y_pred_sk = model.predict(X_test.values.reshape(-1, 1))
plt.clf()
plt.scatter(X_test, y_test)
plt.scatter(X_test, y_pred_sk, c="red")
plt.xlabel("age")
plt.ylabel("purchased")
plt.show()




from sklearn.metrics import confusion_matrix
#extracting true_positives, false_positives, true_negatives, false_negatives
tn, fp, fn, tp = confusion_matrix(y_test, y_pred_sk).ravel()
print("True Negatives: ",tn)
print("False Positives: ",fp)
print("False Negatives: ",fn)
print("True Positives: ",tp)

Accuracy = (tn+tp)*100/(tp+tn+fp+fn)
print("Accuracy {:0.2f}%:".format(Accuracy))


Precision = tp/(tp+fp)
print("Precision {:0.2f}".format(Precision))


Recall = tp/(tp+fn)
print("Recall {:0.2f}".format(Recall))




err = (fp + fn)/(tp + tn + fn + fp)
print("Error rate {:0.2f}".format(err))

